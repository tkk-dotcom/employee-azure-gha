name: Build and Deploy Employee App to AKS

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

env:
  RESOURCE_GROUP: employee-rg
  AKS_CLUSTER: employee-aks
  ACR_NAME: employeeacr97050
  HELM_CHART_PATH: ./helm/employee-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: 5a98946b-1cfc-41eb-872b-7e68ed7f3c81
          tenant-id: a11c3d03-37d6-45fa-992d-bbd72b17bbcf
          subscription-id: 1569933f-380c-4d4b-9d18-599f50547cb9
          allow-no-subscriptions: true
  
      - name: Create Resource Group
        run: |
          echo "Creating Resource Group if not exists..."
          az group create --name "${{ env.RESOURCE_GROUP }}" --location "eastus"
      
      - name: Create Azure Container Registry if not exists
        run: |
          echo "Checking if ACR exists..."
          if ! az acr show --name "${{ env.ACR_NAME }}" --resource-group "${{ env.RESOURCE_GROUP }}" >/dev/null 2>&1; then
            echo "Creating Azure Container Registry..."
            az acr create \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --name "${{ env.ACR_NAME }}" \
              --sku Basic \
              --admin-enabled true
             echo "acr_exists=false" >> $GITHUB_OUTPUT
           else
             echo "ACR already exists."
             echo "acr_exists=true" >> $GITHUB_OUTPUT
           fi

       # Step 1: Login to ACR
      - name: Login to Azure Container Registry
        run: echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ env.ACR_NAME }}.azurecr.io -u ${{ secrets.ACR_USERNAME }} --password-stdin

      # ---------------------------
      # Step 2: Build & Push Backend Image
      # ---------------------------
      - name: Build & Push Backend Image
        uses: docker/build-push-action@v6
        with:
          context: ./employee-backend
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/backend:${{ env.IMAGE_TAG }}
          file: ./employee-backend/Dockerfile

      # ---------------------------
      # Step 3: Build & Push Frontend Image (if applicable)
      # ---------------------------
      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v6
        with:
          context: ./employee-frontend
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}
          file: ./employee-frontend/Dockerfile

      # ---------------------------
      # Step 4: Get AKS Credentials
      # ---------------------------
      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER --overwrite-existing

      # ---------------------------
      # Step 5: Ensure ingress-nginx exists (optional)
      # ---------------------------
      - name: Ensure ingress-nginx exists
        run: |
          kubectl get ns ingress-nginx || kubectl create ns ingress-nginx

      # ---------------------------
      # Step 6: Helm Upgrade/Install
      # ---------------------------
      - name: Helm Upgrade/Install
        run: |
          helm upgrade --install employee-app $HELM_CHART_PATH \
            --namespace default \
            --set backend.image.repository=${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }} \
            --set backend.image.tag=${{ env.IMAGE_TAG }} \
            --set frontend.image.repository=${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }} \
            --set frontend.image.tag=${{ env.IMAGE_TAG }}

      # ---------------------------
      # Step 7: Logout (cleanup)
      # ---------------------------
      - name: Logout from Azure
        run: |
          az account clear

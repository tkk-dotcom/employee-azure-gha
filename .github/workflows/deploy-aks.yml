name: Build and Deploy Employee App to AKS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  RESOURCE_GROUP: employee-rg
  LOCATION: eastus
  ACR_NAME: employeeacr97050
  HELM_CHART_PATH: ./helm/employee-app
  BACKEND_IMAGE: backend
  FRONTEND_IMAGE: frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: employee-azure-gha

    steps:
      # 1) Checkout
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2) Azure login (OIDC)
      - name: Login to Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 3) Generate a safe AKS cluster name (<=63 chars, az-compliant) and export to env
      - name: Generate Safe AKS Cluster Name
        run: |
          RAW_NAME="${{ github.repository }}-${{ github.ref_name }}"
          SAFE_NAME=$(echo "$RAW_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9-' | cut -c1-50)
          SAFE_NAME="${SAFE_NAME}-${{ github.run_number }}"
          echo "AKS_CLUSTER_NAME=$SAFE_NAME" >> $GITHUB_ENV
          echo "Using AKS cluster: $SAFE_NAME"

      # 4) Ensure Resource Group
      - name: Ensure Resource Group
        run: |
          az group create --name "${{ env.RESOURCE_GROUP }}" --location "${{ env.LOCATION }}"

      # 5) Ensure ACR (admin enabled so docker can push easily)
      - name: Ensure ACR
        run: |
          if ! az acr show --name "${{ env.ACR_NAME }}" --resource-group "${{ env.RESOURCE_GROUP }}" >/dev/null 2>&1; then
            echo "Creating ACR..."
            az acr create \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --name "${{ env.ACR_NAME }}" \
              --sku Basic \
              --admin-enabled true
          else
            echo "ACR already exists."
          fi

      # 6) Login to ACR for docker/build-push-action to push
      - name: Login to Azure Container Registry
        run: az acr login --name "${{ env.ACR_NAME }}"

      # 7) Build & Push Backend Image
      - name: Build & Push Backend Image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}

      # 8) Build & Push Frontend Image
      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}

      # 9) Ensure AKS (attach ACR so pulls work without imagePullSecrets)
      - name: Ensure AKS Cluster
        run: |
          if ! az aks show --name "$AKS_CLUSTER_NAME" --resource-group "${{ env.RESOURCE_GROUP }}" >/dev/null 2>&1; then
            echo "Creating AKS cluster..."
            az aks create \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --name "$AKS_CLUSTER_NAME" \
              --location "${{ env.LOCATION }}" \
              --node-count 1 \
              --enable-managed-identity \
              --generate-ssh-keys \
              --attach-acr "${{ env.ACR_NAME }}"
          else
            echo "AKS cluster already exists; ensuring ACR is attached..."
            az aks update \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --name "$AKS_CLUSTER_NAME" \
              --attach-acr "${{ env.ACR_NAME }}"
          fi

      # 10) Get AKS Credentials (kubectl context)
      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --name "$AKS_CLUSTER_NAME" \
            --overwrite-existing

      # 11) Ensure ingress namespace (optional)
      - name: Ensure ingress-nginx Namespace
        run: |
          kubectl get ns ingress-nginx || kubectl create ns ingress-nginx

      # 12) Deploy Backend and Frontend
      - name: Deploy Backend and Frontend
        run: |
          echo "Deploying backend..."
          kubectl apply -f ./backend/k8s/
          echo "Deploying frontend..."
          kubectl apply -f ./frontend/k8s/

      # 13) Expose Frontend Service with External IP (LoadBalancer)
      - name: Create/Update Frontend LoadBalancer Service
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: frontend-lb
          spec:
            type: LoadBalancer
            selector:
              app: frontend
            ports:
              - protocol: TCP
                port: 80
                targetPort: 80
          EOF

      # 14) Wait for External IP Assignment
      - name: Wait for External IP
        run: |
          echo "Waiting for external IP..."
          for i in {1..30}; do
            IP=$(kubectl get svc frontend-lb -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [ -n "$IP" ]; then
              echo "External IP assigned: $IP"
              echo "EXTERNAL_IP=$IP" >> $GITHUB_ENV
              break
            fi
            echo "Attempt $i: External IP not ready yet..."
            sleep 10
          done
          if [ -z "$IP" ]; then
            echo "❌ External IP not assigned after waiting."
            exit 1
          fi

      # 15) Test URL Connectivity
      - name: Test App Connectivity
        run: |
          echo "Testing connection to frontend..."
          curl -I http://$EXTERNAL_IP || (echo "App not reachable" && exit 1)
          echo "✅ Successfully reached http://$EXTERNAL_IP"

      # 16) Show Cluster Info
      - name: Display Cluster Info
        run: |
          kubectl get svc -o wide
          kubectl get pods -o wide

      # 17) Logout from Azure
      - name: Logout from Azure
        run: az account clear

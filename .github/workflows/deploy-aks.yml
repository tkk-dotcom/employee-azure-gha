name: Build and Deploy Employee App to AKS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  RESOURCE_GROUP: employee-rg
  LOCATION: eastus
  ACR_NAME: employeeacr97050
  HELM_CHART_PATH: ./helm/employee-app
  BACKEND_IMAGE: backend
  FRONTEND_IMAGE: frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: employee-azure-gha

    steps:
      # 1) Checkout
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2) Azure login (OIDC)
      - name: Login to Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 3) Generate a safe AKS cluster name (<=63 chars, az-compliant) and export to env
      - name: Generate Safe AKS Cluster Name
        run: |
          RAW_NAME="${{ github.repository }}-${{ github.ref_name }}"
          SAFE_NAME=$(echo "$RAW_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9-' | cut -c1-50)
          SAFE_NAME="${SAFE_NAME}-${{ github.run_number }}"
          echo "AKS_CLUSTER_NAME=$SAFE_NAME" >> $GITHUB_ENV
          echo "Using AKS cluster: $SAFE_NAME"

      # 4) Ensure Resource Group
      - name: Ensure Resource Group
        run: |
          az group create --name "${{ env.RESOURCE_GROUP }}" --location "${{ env.LOCATION }}"

      # 5) Ensure ACR (admin enabled so docker can push easily)
      - name: Ensure ACR
        run: |
          if ! az acr show --name "${{ env.ACR_NAME }}" --resource-group "${{ env.RESOURCE_GROUP }}" >/dev/null 2>&1; then
            echo "Creating ACR..."
            az acr create \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --name "${{ env.ACR_NAME }}" \
              --sku Basic \
              --admin-enabled true
          else
            echo "ACR already exists."
          fi

      # 6) Login to ACR for docker/build-push-action to push
      - name: Login to Azure Container Registry
        run: az acr login --name "${{ env.ACR_NAME }}"

      # 7) Build & Push Backend Image
      - name: Build & Push Backend Image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}

      # 8) Build & Push Frontend Image
      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}

      # 9) Ensure AKS (attach ACR so pulls work without imagePullSecrets)
      - name: Ensure AKS Cluster
        run: |
          if ! az aks show --name "$AKS_CLUSTER_NAME" --resource-group "${{ env.RESOURCE_GROUP }}" >/dev/null 2>&1; then
            echo "Creating AKS cluster..."
            az aks create \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --name "$AKS_CLUSTER_NAME" \
              --location "${{ env.LOCATION }}" \
              --node-count 1 \
              --enable-managed-identity \
              --generate-ssh-keys \
              --attach-acr "${{ env.ACR_NAME }}"
          else
            echo "AKS cluster already exists; ensuring ACR is attached..."
            az aks update \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --name "$AKS_CLUSTER_NAME" \
              --attach-acr "${{ env.ACR_NAME }}"
          fi

      # 10) Get AKS Credentials (kubectl context)
      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --name "$AKS_CLUSTER_NAME" \
            --overwrite-existing

      # 11) Ensure ingress namespace (optional)
      - name: Ensure ingress-nginx Namespace
        run: |
          kubectl get ns ingress-nginx || kubectl create ns ingress-nginx

      # 12) Setup Helm (ensures helm is available)
      - name: Setup Helm
        uses: azure/setup-helm@v4

      # 13) Helm Upgrade/Install
      - name: Helm Upgrade/Install
        run: |
          helm upgrade --install employee-app "${{ env.HELM_CHART_PATH }}" \
            --namespace default \
            --create-namespace \
            --set backend.image.repository=${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }} \
            --set backend.image.tag=${{ env.IMAGE_TAG }} \
            --set frontend.image.repository=${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }} \
            --set frontend.image.tag=${{ env.IMAGE_TAG }}

      # 14) Logout
      - name: Logout from Azure
        run: az account clear

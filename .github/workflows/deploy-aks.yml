name: Build and Deploy Employee App to AKS

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

env:
  RESOURCE_GROUP: employee-rg
  AKS_CLUSTER: employee-aks
  ACR_NAME: employeeacr
  HELM_CHART_PATH: ./helm/employee-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: 5a98946b-1cfc-41eb-872b-7e68ed7f3c81
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true

      # 🔹 Create the Service Principal if it doesn’t exist
      - name: Ensure Service Principal exists
        run: |
          echo "🔍 Checking if Service Principal exists..."
          if ! az ad sp show --id ${{ secrets.AZURE_CLIENT_ID }} &>/dev/null; then
            echo "🆕 Creating Service Principal for App ID..."
            az ad sp create --id ${{ secrets.AZURE_CLIENT_ID }}
          else
            echo "✅ Service Principal already exists."
          fi

      # 🔹 Assign Contributor Role if not already assigned
      - name: Ensure Role Assignment
        run: |
          SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ROLE="Contributor"
          echo "🔍 Checking if role assignment exists..."
          if ! az role assignment list --assignee ${{ secrets.AZURE_CLIENT_ID }} --scope /subscriptions/$SUBSCRIPTION_ID --query "[?roleDefinitionName=='$ROLE']" -o tsv | grep -q .; then
            echo "🪄 Assigning $ROLE role..."
            az role assignment create \
              --assignee ${{ secrets.AZURE_CLIENT_ID }} \
              --role $ROLE \
              --scope /subscriptions/$SUBSCRIPTION_ID
          else
            echo "✅ Role $ROLE already assigned."
          fi

      # 🔹 Continue your normal build or deployment tasks
      - name: Deploy or Build Step
        run: echo "🚀 Deployment steps continue here..."
        
      - name: Create Resource Group
        run: |
          echo "Creating Resource Group if not exists..."
          az group create --name "${{ env.RESOURCE_GROUP }}" --location "eastus"
      - name: Login to ACR
        run: az acr login --name $ACR_NAME
      - name: Build & Push Backend Image
        run: >
          cd backend

          docker build -t $ACR_NAME.azurecr.io/employee-app-backend:${IMAGE_TAG} .

          docker push $ACR_NAME.azurecr.io/employee-app-backend:${IMAGE_TAG}
      - name: Build & Push Frontend Image
        run: >
          cd frontend

          docker build -t $ACR_NAME.azurecr.io/employee-app-frontend:${IMAGE_TAG} .

          docker push $ACR_NAME.azurecr.io/employee-app-frontend:${IMAGE_TAG}
      - name: Get AKS Credentials
        run: >
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER
          --overwrite-existing
      - name: Ensure ingress-nginx exists
        run: >
          set -e

          if ! kubectl get ns ingress-nginx >/dev/null 2>&1; then
            helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
            helm repo update
            helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx               --namespace ingress-nginx --create-namespace
            echo "Waiting for ingress-nginx external IP..."
            kubectl wait --namespace ingress-nginx               --for=condition=available deploy/ingress-nginx-controller --timeout=180s || true
          else
            echo "ingress-nginx already installed."
          fi
      - name: Helm Upgrade/Install
        run: >
          helm upgrade --install employee-app $HELM_CHART_PATH             --set
          backend.image=$ACR_NAME.azurecr.io/employee-app-backend             --set
          backend.tag=${IMAGE_TAG}             --set
          frontend.image=$ACR_NAME.azurecr.io/employee-app-frontend             --set
          frontend.tag=${IMAGE_TAG}
